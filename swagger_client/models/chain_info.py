# coding: utf-8

"""
    Bitcoind

    The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.  # noqa: E501

    OpenAPI spec version: 0.16
    Contact: johan@lepetitbloc.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.bip import BIP  # noqa: F401,E501
from swagger_client.models.chain_info_bip9_softforks import ChainInfoBip9Softforks  # noqa: F401,E501


class ChainInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chain': 'str',
        'blocks': 'int',
        'headers': 'int',
        'bestblockhash': 'str',
        'difficulty': 'int',
        'mediantime': 'int',
        'verificationprogress': 'int',
        'initialblockdownload': 'bool',
        'chainwork': 'str',
        'size_on_disk': 'int',
        'pruned': 'bool',
        'softforks': 'list[BIP]',
        'bip9_softforks': 'ChainInfoBip9Softforks',
        'warnings': 'str'
    }

    attribute_map = {
        'chain': 'chain',
        'blocks': 'blocks',
        'headers': 'headers',
        'bestblockhash': 'bestblockhash',
        'difficulty': 'difficulty',
        'mediantime': 'mediantime',
        'verificationprogress': 'verificationprogress',
        'initialblockdownload': 'initialblockdownload',
        'chainwork': 'chainwork',
        'size_on_disk': 'size_on_disk',
        'pruned': 'pruned',
        'softforks': 'softforks',
        'bip9_softforks': 'bip9_softforks',
        'warnings': 'warnings'
    }

    def __init__(self, chain=None, blocks=None, headers=None, bestblockhash=None, difficulty=None, mediantime=None, verificationprogress=None, initialblockdownload=None, chainwork=None, size_on_disk=None, pruned=None, softforks=None, bip9_softforks=None, warnings=None):  # noqa: E501
        """ChainInfo - a model defined in Swagger"""  # noqa: E501

        self._chain = None
        self._blocks = None
        self._headers = None
        self._bestblockhash = None
        self._difficulty = None
        self._mediantime = None
        self._verificationprogress = None
        self._initialblockdownload = None
        self._chainwork = None
        self._size_on_disk = None
        self._pruned = None
        self._softforks = None
        self._bip9_softforks = None
        self._warnings = None
        self.discriminator = None

        if chain is not None:
            self.chain = chain
        if blocks is not None:
            self.blocks = blocks
        if headers is not None:
            self.headers = headers
        if bestblockhash is not None:
            self.bestblockhash = bestblockhash
        if difficulty is not None:
            self.difficulty = difficulty
        if mediantime is not None:
            self.mediantime = mediantime
        if verificationprogress is not None:
            self.verificationprogress = verificationprogress
        if initialblockdownload is not None:
            self.initialblockdownload = initialblockdownload
        if chainwork is not None:
            self.chainwork = chainwork
        if size_on_disk is not None:
            self.size_on_disk = size_on_disk
        if pruned is not None:
            self.pruned = pruned
        if softforks is not None:
            self.softforks = softforks
        if bip9_softforks is not None:
            self.bip9_softforks = bip9_softforks
        if warnings is not None:
            self.warnings = warnings

    @property
    def chain(self):
        """Gets the chain of this ChainInfo.  # noqa: E501

        Current network name as defined in BIP70 (main, test, regtest)  # noqa: E501

        :return: The chain of this ChainInfo.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this ChainInfo.

        Current network name as defined in BIP70 (main, test, regtest)  # noqa: E501

        :param chain: The chain of this ChainInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["main", "test", "regtest"]  # noqa: E501
        if chain not in allowed_values:
            raise ValueError(
                "Invalid value for `chain` ({0}), must be one of {1}"  # noqa: E501
                .format(chain, allowed_values)
            )

        self._chain = chain

    @property
    def blocks(self):
        """Gets the blocks of this ChainInfo.  # noqa: E501

        The current number of blocks processed in the server  # noqa: E501

        :return: The blocks of this ChainInfo.  # noqa: E501
        :rtype: int
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this ChainInfo.

        The current number of blocks processed in the server  # noqa: E501

        :param blocks: The blocks of this ChainInfo.  # noqa: E501
        :type: int
        """

        self._blocks = blocks

    @property
    def headers(self):
        """Gets the headers of this ChainInfo.  # noqa: E501

        The current number of headers we have validated  # noqa: E501

        :return: The headers of this ChainInfo.  # noqa: E501
        :rtype: int
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this ChainInfo.

        The current number of headers we have validated  # noqa: E501

        :param headers: The headers of this ChainInfo.  # noqa: E501
        :type: int
        """

        self._headers = headers

    @property
    def bestblockhash(self):
        """Gets the bestblockhash of this ChainInfo.  # noqa: E501

        The hash of the currently best block  # noqa: E501

        :return: The bestblockhash of this ChainInfo.  # noqa: E501
        :rtype: str
        """
        return self._bestblockhash

    @bestblockhash.setter
    def bestblockhash(self, bestblockhash):
        """Sets the bestblockhash of this ChainInfo.

        The hash of the currently best block  # noqa: E501

        :param bestblockhash: The bestblockhash of this ChainInfo.  # noqa: E501
        :type: str
        """

        self._bestblockhash = bestblockhash

    @property
    def difficulty(self):
        """Gets the difficulty of this ChainInfo.  # noqa: E501

        The current difficulty  # noqa: E501

        :return: The difficulty of this ChainInfo.  # noqa: E501
        :rtype: int
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty):
        """Sets the difficulty of this ChainInfo.

        The current difficulty  # noqa: E501

        :param difficulty: The difficulty of this ChainInfo.  # noqa: E501
        :type: int
        """

        self._difficulty = difficulty

    @property
    def mediantime(self):
        """Gets the mediantime of this ChainInfo.  # noqa: E501

        The median time of the 11 blocks before the most recent block on the blockchain  # noqa: E501

        :return: The mediantime of this ChainInfo.  # noqa: E501
        :rtype: int
        """
        return self._mediantime

    @mediantime.setter
    def mediantime(self, mediantime):
        """Sets the mediantime of this ChainInfo.

        The median time of the 11 blocks before the most recent block on the blockchain  # noqa: E501

        :param mediantime: The mediantime of this ChainInfo.  # noqa: E501
        :type: int
        """

        self._mediantime = mediantime

    @property
    def verificationprogress(self):
        """Gets the verificationprogress of this ChainInfo.  # noqa: E501

        Estimate of verification progress [0..1]  # noqa: E501

        :return: The verificationprogress of this ChainInfo.  # noqa: E501
        :rtype: int
        """
        return self._verificationprogress

    @verificationprogress.setter
    def verificationprogress(self, verificationprogress):
        """Sets the verificationprogress of this ChainInfo.

        Estimate of verification progress [0..1]  # noqa: E501

        :param verificationprogress: The verificationprogress of this ChainInfo.  # noqa: E501
        :type: int
        """

        self._verificationprogress = verificationprogress

    @property
    def initialblockdownload(self):
        """Gets the initialblockdownload of this ChainInfo.  # noqa: E501


        :return: The initialblockdownload of this ChainInfo.  # noqa: E501
        :rtype: bool
        """
        return self._initialblockdownload

    @initialblockdownload.setter
    def initialblockdownload(self, initialblockdownload):
        """Sets the initialblockdownload of this ChainInfo.


        :param initialblockdownload: The initialblockdownload of this ChainInfo.  # noqa: E501
        :type: bool
        """

        self._initialblockdownload = initialblockdownload

    @property
    def chainwork(self):
        """Gets the chainwork of this ChainInfo.  # noqa: E501

        Total amount of work in active chain, in hexadecimal  # noqa: E501

        :return: The chainwork of this ChainInfo.  # noqa: E501
        :rtype: str
        """
        return self._chainwork

    @chainwork.setter
    def chainwork(self, chainwork):
        """Sets the chainwork of this ChainInfo.

        Total amount of work in active chain, in hexadecimal  # noqa: E501

        :param chainwork: The chainwork of this ChainInfo.  # noqa: E501
        :type: str
        """

        self._chainwork = chainwork

    @property
    def size_on_disk(self):
        """Gets the size_on_disk of this ChainInfo.  # noqa: E501


        :return: The size_on_disk of this ChainInfo.  # noqa: E501
        :rtype: int
        """
        return self._size_on_disk

    @size_on_disk.setter
    def size_on_disk(self, size_on_disk):
        """Sets the size_on_disk of this ChainInfo.


        :param size_on_disk: The size_on_disk of this ChainInfo.  # noqa: E501
        :type: int
        """

        self._size_on_disk = size_on_disk

    @property
    def pruned(self):
        """Gets the pruned of this ChainInfo.  # noqa: E501

        If the blocks are subject to pruning  # noqa: E501

        :return: The pruned of this ChainInfo.  # noqa: E501
        :rtype: bool
        """
        return self._pruned

    @pruned.setter
    def pruned(self, pruned):
        """Sets the pruned of this ChainInfo.

        If the blocks are subject to pruning  # noqa: E501

        :param pruned: The pruned of this ChainInfo.  # noqa: E501
        :type: bool
        """

        self._pruned = pruned

    @property
    def softforks(self):
        """Gets the softforks of this ChainInfo.  # noqa: E501

        status of softforks in progress  # noqa: E501

        :return: The softforks of this ChainInfo.  # noqa: E501
        :rtype: list[BIP]
        """
        return self._softforks

    @softforks.setter
    def softforks(self, softforks):
        """Sets the softforks of this ChainInfo.

        status of softforks in progress  # noqa: E501

        :param softforks: The softforks of this ChainInfo.  # noqa: E501
        :type: list[BIP]
        """

        self._softforks = softforks

    @property
    def bip9_softforks(self):
        """Gets the bip9_softforks of this ChainInfo.  # noqa: E501


        :return: The bip9_softforks of this ChainInfo.  # noqa: E501
        :rtype: ChainInfoBip9Softforks
        """
        return self._bip9_softforks

    @bip9_softforks.setter
    def bip9_softforks(self, bip9_softforks):
        """Sets the bip9_softforks of this ChainInfo.


        :param bip9_softforks: The bip9_softforks of this ChainInfo.  # noqa: E501
        :type: ChainInfoBip9Softforks
        """

        self._bip9_softforks = bip9_softforks

    @property
    def warnings(self):
        """Gets the warnings of this ChainInfo.  # noqa: E501

        An eventual warning on the current build status.  # noqa: E501

        :return: The warnings of this ChainInfo.  # noqa: E501
        :rtype: str
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this ChainInfo.

        An eventual warning on the current build status.  # noqa: E501

        :param warnings: The warnings of this ChainInfo.  # noqa: E501
        :type: str
        """

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChainInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
