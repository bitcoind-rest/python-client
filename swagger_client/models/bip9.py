# coding: utf-8

"""
    Bitcoind

    The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.  # noqa: E501

    OpenAPI spec version: 0.16
    Contact: johan@lepetitbloc.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BIP9(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'start_time': 'int',
        'timeout': 'int',
        'since': 'int'
    }

    attribute_map = {
        'status': 'status',
        'start_time': 'startTime',
        'timeout': 'timeout',
        'since': 'since'
    }

    def __init__(self, status=None, start_time=None, timeout=None, since=None):  # noqa: E501
        """BIP9 - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._start_time = None
        self._timeout = None
        self._since = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if start_time is not None:
            self.start_time = start_time
        if timeout is not None:
            self.timeout = timeout
        if since is not None:
            self.since = since

    @property
    def status(self):
        """Gets the status of this BIP9.  # noqa: E501


        :return: The status of this BIP9.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BIP9.


        :param status: The status of this BIP9.  # noqa: E501
        :type: str
        """
        allowed_values = ["defined", "started", "locked_in", "active", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def start_time(self):
        """Gets the start_time of this BIP9.  # noqa: E501

        The starttime specifies a minimum median time past of a block at which the bit gains its meaning.  # noqa: E501

        :return: The start_time of this BIP9.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BIP9.

        The starttime specifies a minimum median time past of a block at which the bit gains its meaning.  # noqa: E501

        :param start_time: The start_time of this BIP9.  # noqa: E501
        :type: int
        """

        self._start_time = start_time

    @property
    def timeout(self):
        """Gets the timeout of this BIP9.  # noqa: E501

        The timeout specifies a time at which the deployment is considered failed. If the median time past of a block >= timeout and the soft fork has not yet locked in (including this block's bit state), the deployment is considered failed on all descendants of the block.  # noqa: E501

        :return: The timeout of this BIP9.  # noqa: E501
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this BIP9.

        The timeout specifies a time at which the deployment is considered failed. If the median time past of a block >= timeout and the soft fork has not yet locked in (including this block's bit state), the deployment is considered failed on all descendants of the block.  # noqa: E501

        :param timeout: The timeout of this BIP9.  # noqa: E501
        :type: int
        """

        self._timeout = timeout

    @property
    def since(self):
        """Gets the since of this BIP9.  # noqa: E501


        :return: The since of this BIP9.  # noqa: E501
        :rtype: int
        """
        return self._since

    @since.setter
    def since(self, since):
        """Sets the since of this BIP9.


        :param since: The since of this BIP9.  # noqa: E501
        :type: int
        """

        self._since = since

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BIP9):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
