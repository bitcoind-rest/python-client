# coding: utf-8

"""
    Bitcoind

    The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.  # noqa: E501

    OpenAPI spec version: 0.16
    Contact: johan@lepetitbloc.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Transaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'fee': 'float',
        'confirmations': 'int',
        'blockhash': 'str',
        'blockindex': 'int',
        'blocktime': 'int',
        'txid': 'str',
        'txhash': 'str',
        'version': 'int',
        'size': 'int',
        'vsize': 'int',
        'locktime': 'int',
        'time': 'int',
        'timereceived': 'int',
        'bip125_replaceable': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'fee': 'fee',
        'confirmations': 'confirmations',
        'blockhash': 'blockhash',
        'blockindex': 'blockindex',
        'blocktime': 'blocktime',
        'txid': 'txid',
        'txhash': 'txhash',
        'version': 'version',
        'size': 'size',
        'vsize': 'vsize',
        'locktime': 'locktime',
        'time': 'time',
        'timereceived': 'timereceived',
        'bip125_replaceable': 'bip125-replaceable'
    }

    def __init__(self, amount=None, fee=None, confirmations=None, blockhash=None, blockindex=None, blocktime=None, txid=None, txhash=None, version=None, size=None, vsize=None, locktime=None, time=None, timereceived=None, bip125_replaceable=None):  # noqa: E501
        """Transaction - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._fee = None
        self._confirmations = None
        self._blockhash = None
        self._blockindex = None
        self._blocktime = None
        self._txid = None
        self._txhash = None
        self._version = None
        self._size = None
        self._vsize = None
        self._locktime = None
        self._time = None
        self._timereceived = None
        self._bip125_replaceable = None
        self.discriminator = None

        if amount is not None:
            self.amount = amount
        if fee is not None:
            self.fee = fee
        if confirmations is not None:
            self.confirmations = confirmations
        if blockhash is not None:
            self.blockhash = blockhash
        if blockindex is not None:
            self.blockindex = blockindex
        if blocktime is not None:
            self.blocktime = blocktime
        if txid is not None:
            self.txid = txid
        if txhash is not None:
            self.txhash = txhash
        if version is not None:
            self.version = version
        if size is not None:
            self.size = size
        if vsize is not None:
            self.vsize = vsize
        if locktime is not None:
            self.locktime = locktime
        if time is not None:
            self.time = time
        if timereceived is not None:
            self.timereceived = timereceived
        if bip125_replaceable is not None:
            self.bip125_replaceable = bip125_replaceable

    @property
    def amount(self):
        """Gets the amount of this Transaction.  # noqa: E501

        The transaction amount in BTC  # noqa: E501

        :return: The amount of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.

        The transaction amount in BTC  # noqa: E501

        :param amount: The amount of this Transaction.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def fee(self):
        """Gets the fee of this Transaction.  # noqa: E501

        The amount of the fee in BTC. This is negative and only available for the send category of transactions.  # noqa: E501

        :return: The fee of this Transaction.  # noqa: E501
        :rtype: float
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this Transaction.

        The amount of the fee in BTC. This is negative and only available for the send category of transactions.  # noqa: E501

        :param fee: The fee of this Transaction.  # noqa: E501
        :type: float
        """

        self._fee = fee

    @property
    def confirmations(self):
        """Gets the confirmations of this Transaction.  # noqa: E501

        The number of confirmations  # noqa: E501

        :return: The confirmations of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._confirmations

    @confirmations.setter
    def confirmations(self, confirmations):
        """Sets the confirmations of this Transaction.

        The number of confirmations  # noqa: E501

        :param confirmations: The confirmations of this Transaction.  # noqa: E501
        :type: int
        """

        self._confirmations = confirmations

    @property
    def blockhash(self):
        """Gets the blockhash of this Transaction.  # noqa: E501

        The block hash  # noqa: E501

        :return: The blockhash of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._blockhash

    @blockhash.setter
    def blockhash(self, blockhash):
        """Sets the blockhash of this Transaction.

        The block hash  # noqa: E501

        :param blockhash: The blockhash of this Transaction.  # noqa: E501
        :type: str
        """

        self._blockhash = blockhash

    @property
    def blockindex(self):
        """Gets the blockindex of this Transaction.  # noqa: E501

        The index of the transaction in the block that includes it  # noqa: E501

        :return: The blockindex of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._blockindex

    @blockindex.setter
    def blockindex(self, blockindex):
        """Sets the blockindex of this Transaction.

        The index of the transaction in the block that includes it  # noqa: E501

        :param blockindex: The blockindex of this Transaction.  # noqa: E501
        :type: int
        """

        self._blockindex = blockindex

    @property
    def blocktime(self):
        """Gets the blocktime of this Transaction.  # noqa: E501

        The time in seconds since epoch (1 Jan 1970 GMT)  # noqa: E501

        :return: The blocktime of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._blocktime

    @blocktime.setter
    def blocktime(self, blocktime):
        """Sets the blocktime of this Transaction.

        The time in seconds since epoch (1 Jan 1970 GMT)  # noqa: E501

        :param blocktime: The blocktime of this Transaction.  # noqa: E501
        :type: int
        """

        self._blocktime = blocktime

    @property
    def txid(self):
        """Gets the txid of this Transaction.  # noqa: E501

        The transaction id  # noqa: E501

        :return: The txid of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._txid

    @txid.setter
    def txid(self, txid):
        """Sets the txid of this Transaction.

        The transaction id  # noqa: E501

        :param txid: The txid of this Transaction.  # noqa: E501
        :type: str
        """

        self._txid = txid

    @property
    def txhash(self):
        """Gets the txhash of this Transaction.  # noqa: E501

        The transaction hash  # noqa: E501

        :return: The txhash of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._txhash

    @txhash.setter
    def txhash(self, txhash):
        """Sets the txhash of this Transaction.

        The transaction hash  # noqa: E501

        :param txhash: The txhash of this Transaction.  # noqa: E501
        :type: str
        """

        self._txhash = txhash

    @property
    def version(self):
        """Gets the version of this Transaction.  # noqa: E501


        :return: The version of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Transaction.


        :param version: The version of this Transaction.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def size(self):
        """Gets the size of this Transaction.  # noqa: E501


        :return: The size of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Transaction.


        :param size: The size of this Transaction.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def vsize(self):
        """Gets the vsize of this Transaction.  # noqa: E501


        :return: The vsize of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._vsize

    @vsize.setter
    def vsize(self, vsize):
        """Sets the vsize of this Transaction.


        :param vsize: The vsize of this Transaction.  # noqa: E501
        :type: int
        """

        self._vsize = vsize

    @property
    def locktime(self):
        """Gets the locktime of this Transaction.  # noqa: E501


        :return: The locktime of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._locktime

    @locktime.setter
    def locktime(self, locktime):
        """Sets the locktime of this Transaction.


        :param locktime: The locktime of this Transaction.  # noqa: E501
        :type: int
        """

        self._locktime = locktime

    @property
    def time(self):
        """Gets the time of this Transaction.  # noqa: E501

        The transaction time in seconds since epoch (1 Jan 1970 GMT)  # noqa: E501

        :return: The time of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Transaction.

        The transaction time in seconds since epoch (1 Jan 1970 GMT)  # noqa: E501

        :param time: The time of this Transaction.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def timereceived(self):
        """Gets the timereceived of this Transaction.  # noqa: E501

        The time received in seconds since epoch (1 Jan 1970 GMT)  # noqa: E501

        :return: The timereceived of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._timereceived

    @timereceived.setter
    def timereceived(self, timereceived):
        """Sets the timereceived of this Transaction.

        The time received in seconds since epoch (1 Jan 1970 GMT)  # noqa: E501

        :param timereceived: The timereceived of this Transaction.  # noqa: E501
        :type: int
        """

        self._timereceived = timereceived

    @property
    def bip125_replaceable(self):
        """Gets the bip125_replaceable of this Transaction.  # noqa: E501

        Whether this transaction could be replaced due to BIP125 (replace-by-fee); may be unknown for unconfirmed transactions not in the mempool  # noqa: E501

        :return: The bip125_replaceable of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._bip125_replaceable

    @bip125_replaceable.setter
    def bip125_replaceable(self, bip125_replaceable):
        """Sets the bip125_replaceable of this Transaction.

        Whether this transaction could be replaced due to BIP125 (replace-by-fee); may be unknown for unconfirmed transactions not in the mempool  # noqa: E501

        :param bip125_replaceable: The bip125_replaceable of this Transaction.  # noqa: E501
        :type: str
        """
        allowed_values = ["yes", "no", "unknown"]  # noqa: E501
        if bip125_replaceable not in allowed_values:
            raise ValueError(
                "Invalid value for `bip125_replaceable` ({0}), must be one of {1}"  # noqa: E501
                .format(bip125_replaceable, allowed_values)
            )

        self._bip125_replaceable = bip125_replaceable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
