# coding: utf-8

"""
    Bitcoind

    The REST API can be enabled with the `-rest` option. The interface runs on the same port as the JSON-RPC interface, by default port `8332` for **mainnet**, port `18332` for **testnet**, and port `18443` for **regtest**.  # noqa: E501

    OpenAPI spec version: 0.16
    Contact: johan@lepetitbloc.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MemoryPoolApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def rest_getutxos(self, tx_hash, tx_output, format, **kwargs):  # noqa: E501
        """Returns Unspent Transaction (TX) Outputs  # noqa: E501

        Only supports JSON as output format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rest_getutxos(tx_hash, tx_output, format, async=True)
        >>> result = thread.get()

        :param async bool
        :param str tx_hash: The transaction hash (required)
        :param str tx_output: The transaction output (required)
        :param str format: The expected format (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.rest_getutxos_with_http_info(tx_hash, tx_output, format, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_getutxos_with_http_info(tx_hash, tx_output, format, **kwargs)  # noqa: E501
            return data

    def rest_getutxos_with_http_info(self, tx_hash, tx_output, format, **kwargs):  # noqa: E501
        """Returns Unspent Transaction (TX) Outputs  # noqa: E501

        Only supports JSON as output format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rest_getutxos_with_http_info(tx_hash, tx_output, format, async=True)
        >>> result = thread.get()

        :param async bool
        :param str tx_hash: The transaction hash (required)
        :param str tx_output: The transaction output (required)
        :param str format: The expected format (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tx_hash', 'tx_output', 'format']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_getutxos" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tx_hash' is set
        if ('tx_hash' not in params or
                params['tx_hash'] is None):
            raise ValueError("Missing the required parameter `tx_hash` when calling `rest_getutxos`")  # noqa: E501
        # verify the required parameter 'tx_output' is set
        if ('tx_output' not in params or
                params['tx_output'] is None):
            raise ValueError("Missing the required parameter `tx_output` when calling `rest_getutxos`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `rest_getutxos`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tx_hash' in params:
            path_params['txHash'] = params['tx_hash']  # noqa: E501
        if 'tx_output' in params:
            path_params['txOutput'] = params['tx_output']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getutxos/checkmempool/{txHash}-{txOutput}.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_headers(self, header_count, block_hash, format, **kwargs):  # noqa: E501
        """Returns headers.  # noqa: E501

        Only supports BIN and HEX as output format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rest_headers(header_count, block_hash, format, async=True)
        >>> result = thread.get()

        :param async bool
        :param int header_count: The header count (required)
        :param str block_hash: The block hash (required)
        :param str format: The expected format (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.rest_headers_with_http_info(header_count, block_hash, format, **kwargs)  # noqa: E501
        else:
            (data) = self.rest_headers_with_http_info(header_count, block_hash, format, **kwargs)  # noqa: E501
            return data

    def rest_headers_with_http_info(self, header_count, block_hash, format, **kwargs):  # noqa: E501
        """Returns headers.  # noqa: E501

        Only supports BIN and HEX as output format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rest_headers_with_http_info(header_count, block_hash, format, async=True)
        >>> result = thread.get()

        :param async bool
        :param int header_count: The header count (required)
        :param str block_hash: The block hash (required)
        :param str format: The expected format (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['header_count', 'block_hash', 'format']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_headers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'header_count' is set
        if ('header_count' not in params or
                params['header_count'] is None):
            raise ValueError("Missing the required parameter `header_count` when calling `rest_headers`")  # noqa: E501
        # verify the required parameter 'block_hash' is set
        if ('block_hash' not in params or
                params['block_hash'] is None):
            raise ValueError("Missing the required parameter `block_hash` when calling `rest_headers`")  # noqa: E501
        # verify the required parameter 'format' is set
        if ('format' not in params or
                params['format'] is None):
            raise ValueError("Missing the required parameter `format` when calling `rest_headers`")  # noqa: E501

        if 'header_count' in params and params['header_count'] > 1999:  # noqa: E501
            raise ValueError("Invalid value for parameter `header_count` when calling `rest_headers`, must be a value less than or equal to `1999`")  # noqa: E501
        if 'header_count' in params and params['header_count'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `header_count` when calling `rest_headers`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'header_count' in params:
            path_params['headerCount'] = params['header_count']  # noqa: E501
        if 'block_hash' in params:
            path_params['blockHash'] = params['block_hash']  # noqa: E501
        if 'format' in params:
            path_params['format'] = params['format']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/headers/{headerCount}/{blockHash}.{format}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_mempool_contents(self, **kwargs):  # noqa: E501
        """Returns transactions in the TX mempool.  # noqa: E501

        Only supports JSON as output format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rest_mempool_contents(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponseDefault
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.rest_mempool_contents_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rest_mempool_contents_with_http_info(**kwargs)  # noqa: E501
            return data

    def rest_mempool_contents_with_http_info(self, **kwargs):  # noqa: E501
        """Returns transactions in the TX mempool.  # noqa: E501

        Only supports JSON as output format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rest_mempool_contents_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponseDefault
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_mempool_contents" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mempool/contents.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponseDefault',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def rest_mempool_info(self, **kwargs):  # noqa: E501
        """Returns various information about the TX mempool.  # noqa: E501

        Only supports JSON as output format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rest_mempool_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: MemoryPool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.rest_mempool_info_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.rest_mempool_info_with_http_info(**kwargs)  # noqa: E501
            return data

    def rest_mempool_info_with_http_info(self, **kwargs):  # noqa: E501
        """Returns various information about the TX mempool.  # noqa: E501

        Only supports JSON as output format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.rest_mempool_info_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: MemoryPool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rest_mempool_info" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/mempool/info.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MemoryPool',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
